<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-03-31T19:48:04-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Quick Thoughts</title><subtitle>Some quick thoughts on software development, AI, and startups.</subtitle><author><name>{&quot;email&quot;=&gt;&quot;blog@quickthoughts.ca&quot;}</name><email>blog@quickthoughts.ca</email></author><entry><title type="html">Rethinking Library Dependencies in the GenAI age</title><link href="http://localhost:4000/technology/opinion/genai/javascript/2025/03/21/GenAI-replaces-code-libraries.html" rel="alternate" type="text/html" title="Rethinking Library Dependencies in the GenAI age" /><published>2025-03-21T18:10:48-04:00</published><updated>2025-03-21T18:10:48-04:00</updated><id>http://localhost:4000/technology/opinion/genai/javascript/2025/03/21/GenAI-replaces-code-libraries</id><content type="html" xml:base="http://localhost:4000/technology/opinion/genai/javascript/2025/03/21/GenAI-replaces-code-libraries.html"><![CDATA[<p>The rise of Generative AI (GenAI) is transforming how developers approach common development challenges. One emerging trend is the ability to use GenAI to generate custom, lightweight solutions that reduce the need for incorporating large, feature-rich libraries.</p>

<p>It’s a fairly common dilemma that a developer wants to use a libary to solve a specific issue. For exmaple, with React, I might want a component that enables more complex drop down menu functionality (like a nice inline “select many” UX). However, when looking for good 3rd party libraries, they typically provide every feature imaginable which can cause bloat, both in terms of size of the codebase but also in API and developer documentation.</p>

<p> </p>

<p>When a project only requires a subset of features from a comprehensive library, leveraging GenAI to implement the essential functionality can offer significant advantages:</p>

<ul>
  <li>
    <p><strong>Seamless Integration with Project’s Coding Style:</strong><br />
Custom-tailored code adheres to your team’s conventions and paradigms, ensuring consistency across the codebase.</p>
  </li>
  <li>
    <p><strong>Minimized External Dependencies:</strong><br />
By only implementing what’s truly necessary, you reduce the risk of version incompatibilities and the overhead of maintaining multiple dependencies. This approach addresses issues like API changes or mismatches between major library versions (for instance, differences in framework or language specifications).</p>
  </li>
  <li>
    <p><strong>Enhanced Security and Maintainability:</strong><br />
Writing code in-house means you have full visibility into how it works, reducing dependency on third-party libraries that might not be as thoroughly audited or could potentially introduce vulnerabilities. With GenAI assisting in generating a baseline, you benefit from speed without sacrificing control.</p>
  </li>
</ul>

<p> </p>

<p>That being said, there are trade-offs to consider:</p>

<ul>
  <li>
    <p><strong>Time and Resource Investment:</strong><br />
Crafting your own solution — even one powered by GenAI — demands additional upfront investment in time and resources. You might need to write tests, handle edge cases, and plan for complex user interactions that mature libraries have already ironed out.</p>
  </li>
  <li>
    <p><strong>Reinventing the Wheel:</strong><br />
There’s a risk of reimplementing functionality that is already robustly handled by existing packages, if you’re not careful. Maybe the all-encompassing library provides <em>all those features</em> for a reason.</p>
  </li>
</ul>

<p>To strike a balance, consider a hybrid approach:</p>

<ul>
  <li>
    <p><strong>Start with GenAI-generated Code:</strong><br />
Leverage GenAI to create a lean, baseline implementation of the functionality you need.</p>
  </li>
  <li>
    <p><strong>Refine and Integrate Selectively:</strong><br />
Feed in libaries relevant source code/documentation to set context for the LLM while discarding or reworking portions that add unnecessary complexity or bloat.</p>
  </li>
  <li>
    <p><strong>Tailor for Maintainability:</strong><br />
Customize the generated code to blend seamlessly with the existing codebase, adopt your team’s best practices, and ensure quality through comprehensive testing.</p>
  </li>
</ul>

<p> </p>

<p>This balanced strategy enables software developers to harness the benefits of external expertise while keeping their applications lightweight, secure, and maintainable. GenAI doesn’t completely replace the need for libraries; rather, it offers a dynamic tool that can help you pick and choose the best parts while filling in the gaps with customized, purpose-built solutions.</p>

<p>It’s worth noting that the viability of this approach also depends on the capabilities of the GenAI model being used. If the model struggles to accurately generate or understand the syntax and features of a specific library, it may not be a suitable replacement. Developers should carefully evaluate the performance of the GenAI model in the context of their project’s requirements before adopting this workflow.</p>

<p>Said again, the emergence of GenAI is not a silver bullet that will eliminate the need for libraries, but rather a powerful enabler that can reduce dependency fatigue and enhance development agility. By striking a balance between external expertise and custom-tailored solutions, software teams can create applications that are lightweight, secure, and aligned with their unique needs.</p>]]></content><author><name>{&quot;email&quot;=&gt;&quot;blog@quickthoughts.ca&quot;}</name><email>blog@quickthoughts.ca</email></author><category term="technology" /><category term="opinion" /><category term="genai" /><category term="javascript" /><category term="editorial" /><category term="react" /><category term="llms" /><summary type="html"><![CDATA[The rise of Generative AI (GenAI) is transforming how developers approach common development challenges. One emerging trend is the ability to use GenAI to generate custom, lightweight solutions that reduce the need for incorporating large, feature-rich libraries.]]></summary></entry><entry><title type="html">Using Google’s Captcha V3 with Express and Node</title><link href="http://localhost:4000/development/opinion/2023/03/05/google-captcha-express-js.html" rel="alternate" type="text/html" title="Using Google’s Captcha V3 with Express and Node" /><published>2023-03-05T20:10:48-05:00</published><updated>2023-03-05T20:10:48-05:00</updated><id>http://localhost:4000/development/opinion/2023/03/05/google-captcha-express-js</id><content type="html" xml:base="http://localhost:4000/development/opinion/2023/03/05/google-captcha-express-js.html"><![CDATA[<p>Before getting started, <a href="https://quickthoughts.ca/development/degoogle/2020/12/16/using-hcaptcha-in-vue-instead-of-google.html">check out the newer version of this article</a> where I implement hCaptcha with express/Vue. hCaptcha is a non-google dependent captcha service. Otherwise, enjoy.</p>

<p>Building an anonymous user-facing technology is risky! Abuse, and spam are likely, along with potential DOS and other security/performance issues abound. Hence, <a href="https://developers.google.com/recaptcha/">Google ReCaptcha</a> - a wide-spread (everyone uses it), intelligent (it’s a lot more versatile than before) way to help limit spam from otherwise exposed forms.</p>

<p>Captcha systems are very common in today’s internet with websites demanding clarity on species (robot or human) before providing anything useful. And it makes sense, non-validated users (i.e. webcrawlers, bots, spiders, etc) can easily abuse services, reducing resources for meaningful clients. Google’s latest version is especially useful in that it grades the quality of the user on a scale (0 - 1), allowing for judgement of quality to be determined by the client.</p>

<p>It also can grade users without any user interaction - no more clicking “I’m not a robot.” buttons during checkout or form submission! A seamless integration means legitimate users no longer have to be burdened by puzzle-esque questionnaires. So yeah, all in all, it’s a good start at validating interactions on forms (although there’s plenty more one can do to limit spam).</p>

<h2 id="integrating-google-recaptcha-v3-with-an-express-application">Integrating Google ReCaptcha V3 with an Express application</h2>

<p>The <a href="https://developers.google.com/recaptcha/docs/v3">documentation</a> provided by Google is reasonably helpful - but an actual example is better!</p>

<h3 id="the-frontend-setup">The Frontend setup!</h3>

<p>First, add the correct ReCaptcha <code class="language-plaintext highlighter-rouge">&lt;script /&gt;</code> to your client-side-facing template (Load it earlier enough to provide enough data for a more accurate response). Something like:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://www.google.com/recaptcha/api.js?render=_reCAPTCHA_site_key&amp;onload=onLoad&amp;render=explicit"</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div></div>

<p>Next, configure how you want the script to inject itself into the form you wanted guarded. I add the callback function in the script’s <code class="language-plaintext highlighter-rouge">src</code> to inject the captcha value into the form.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">onLoad</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">grecaptcha</span><span class="p">.</span><span class="nf">ready</span><span class="p">(</span><span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">grecaptcha</span>
      <span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">captchaToken</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span> <span class="p">{</span> <span class="na">action</span><span class="p">:</span> <span class="dl">"</span><span class="s2">submit</span><span class="dl">"</span> <span class="p">})</span>
      <span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nf">function </span><span class="p">(</span><span class="nx">token</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Find the hidden input element in the form I wanted validated</span>
        <span class="kd">let</span> <span class="nx">t</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">#reCaptcha</span><span class="dl">"</span><span class="p">);</span>
        <span class="c1">// give it a value returned by ReCaptcha</span>
        <span class="nx">t</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">token</span><span class="p">;</span>
      <span class="p">});</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>
<pre><code class="language-HTML">    &lt;form&gt;
        &lt;!-- Other form stuff --&gt;
        &lt;input id="reCaptcha" type="hidden" name="g-recaptcha-response"&gt;
    &lt;/form&gt;
</code></pre>

<p>All in all, all that’s happening is the script loads, calls the function, injects a reCaptcha token into the form that we can validate against on the server. Simple stuff!</p>

<h3 id="setting-up-the-backend">Setting up the Backend</h3>

<p>We need to be able to parse the form, grab the token value, and then shoot out a call to the reCaptcha service and see if the submitted form can be trusted.</p>

<p>In Express, a simple middleware that can parse and shootout a request to the service is just what the Doctor ordered. It provides a portable way to pick and choose which routes need to be validated, and allows an easy way to reject requests.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">verifyRecaptcha</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">captchaURL</span> <span class="o">=</span> <span class="s2">`https://www.google.com/recaptcha/api/siteverify`</span><span class="p">;</span>
  <span class="c1">// Get the token from the form</span>
  <span class="kd">const</span> <span class="nx">key</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">[</span><span class="dl">"</span><span class="s2">g-recaptcha-response</span><span class="dl">"</span><span class="p">];</span>

  <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">key</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Captcha could not be verified. Please try again.</span><span class="dl">"</span><span class="p">);</span>

  <span class="c1">// axios works in Node, isn't that nice?</span>
  <span class="nf">axios</span><span class="p">({</span>
    <span class="na">url</span><span class="p">:</span> <span class="nx">captchaURL</span><span class="p">,</span>
    <span class="na">method</span><span class="p">:</span> <span class="dl">"</span><span class="s2">POST</span><span class="dl">"</span><span class="p">,</span>
    <span class="c1">// reCaptcha demands x-www-form-urlencoded requests</span>
    <span class="na">headers</span><span class="p">:</span> <span class="p">{</span> <span class="na">ContentType</span><span class="p">:</span> <span class="dl">"</span><span class="s2">application/x-www-form-urlencoded</span><span class="dl">"</span> <span class="p">},</span>
    <span class="na">body</span><span class="p">:</span> <span class="s2">`secret=</span><span class="p">${</span><span class="nx">SECRET</span><span class="p">}</span><span class="s2">&amp;response=</span><span class="p">${</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">[</span><span class="dl">"</span><span class="s2">g-recaptcha-response</span><span class="dl">"</span><span class="p">]}</span><span class="s2">`</span><span class="p">,</span>
  <span class="p">})</span>
    <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">captchaRes</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">captchaRes</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
      <span class="c1">// check if successfully requested, and that a score over .5 is met</span>
      <span class="k">if </span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">success</span> <span class="o">===</span> <span class="kc">true</span> <span class="o">&amp;&amp;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">score</span> <span class="o">&gt;</span> <span class="mf">0.5</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">next</span><span class="p">();</span>
      <span class="p">}</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Captcha could not be verified. Please try again.</span><span class="dl">"</span><span class="p">);</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nf">next</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The function grabs the token from the form, shoots a POST request to reCaptcha, and then checks if its successful and returns a high enough score to continue on to the next step.</p>

<p>A route looks very familiar.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">router</span><span class="p">.</span><span class="nf">route</span><span class="p">(</span><span class="dl">"</span><span class="s2">/login</span><span class="dl">"</span><span class="p">,</span> <span class="nx">verifyRecaptcha</span><span class="p">).</span><span class="nf">get</span><span class="p">(</span><span class="nx">handleRoute</span><span class="p">);</span>
</code></pre></div></div>

<p>And that’s it! A really straightforward way to provide some protection and judge user interactions.</p>]]></content><author><name>{&quot;email&quot;=&gt;&quot;blog@quickthoughts.ca&quot;}</name><email>blog@quickthoughts.ca</email></author><category term="development" /><category term="opinion" /><category term="express" /><category term="captcha" /><category term="node" /><category term="web-development" /><category term="programming" /><category term="opinion" /><summary type="html"><![CDATA[Before getting started, check out the newer version of this article where I implement hCaptcha with express/Vue. hCaptcha is a non-google dependent captcha service. Otherwise, enjoy.]]></summary></entry><entry><title type="html">Considerations when supporting a legacy software stack</title><link href="http://localhost:4000/development/opinion/2023/01/31/considerations-when-supporting-a-legacy.html" rel="alternate" type="text/html" title="Considerations when supporting a legacy software stack" /><published>2023-01-31T14:10:48-05:00</published><updated>2023-01-31T14:10:48-05:00</updated><id>http://localhost:4000/development/opinion/2023/01/31/considerations-when-supporting-a-legacy</id><content type="html" xml:base="http://localhost:4000/development/opinion/2023/01/31/considerations-when-supporting-a-legacy.html"><![CDATA[<p>Another year and another post about managing legacy web applications.</p>

<p>My experience and work for the last year has involved getting heads down on countless projects, some brand new and others inherited after years in the works, and some using code created more than 10 years ago. If you’re familiar with how much the web development landscape has evolved in the last decade, you know supporting old applications were built in a different era. Flash still came with browsers, XML, SOAP and XHTML were things, and PHP 5.3 was still supported.</p>

<p>Holding on to complicated and outdated applications provides a serious challenge for the whole organization. Migrating may not be possible, a rebuild is likely expensive and doing nothing means hosting a site with an forever growing list of potential security issues. Ultimately, a change is inevitable - no company, organization, or team can afford to stay so static as to not improve (even if change comes at a glacial pace).</p>]]></content><author><name>{&quot;email&quot;=&gt;&quot;blog@quickthoughts.ca&quot;}</name><email>blog@quickthoughts.ca</email></author><category term="development" /><category term="opinion" /><category term="python" /><category term="vue" /><category term="web-development" /><category term="programming" /><summary type="html"><![CDATA[Another year and another post about managing legacy web applications.]]></summary></entry><entry><title type="html">Build a URL Shortener with Node + Mongo</title><link href="http://localhost:4000/development/opinion/2022/02/13/nodejs-url-shortener-tutorial.html" rel="alternate" type="text/html" title="Build a URL Shortener with Node + Mongo" /><published>2022-02-13T04:10:48-05:00</published><updated>2022-02-13T04:10:48-05:00</updated><id>http://localhost:4000/development/opinion/2022/02/13/nodejs-url-shortener-tutorial</id><content type="html" xml:base="http://localhost:4000/development/opinion/2022/02/13/nodejs-url-shortener-tutorial.html"><![CDATA[<p>A while back, long before tonight, I built a <a href="https://nodejs.org/en/">Node.js</a> application called <a href="https://lyt.haus">Lyt.Haus</a> that shortened URLs. Conceptually, it’s simple and not exactly groundbreaking—there are hundreds, if not thousands, of sites offering similar functionality. So, why did I bother investing the time? Simply put, I wanted to tackle a project with a realistic goal that I could build from scratch within a manageable timeframe and, ultimately, use myself (and others).</p>

<p>Looking back, I think it was a great use of my time. It allowed me to dive deep into a full JavaScript/typescript stack while providing real-world experience building a new application from scratch. I’d recommend any developer, beginner or expert programmer alike, looking for learn fast to give it a shot.</p>

<h2 id="the-magic-sauce">The Magic Sauce</h2>

<p>I’ll skip over the usual project setup and environment-specific details and jump into the code. But first, let’s orient ourselves with a file overview:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">views</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">index.ejs</code></li>
      <li><code class="language-plaintext highlighter-rouge">accounts.ejs</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">routes</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">index.js</code></li>
      <li><code class="language-plaintext highlighter-rouge">accounts.js</code></li>
      <li><code class="language-plaintext highlighter-rouge">users.js</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">models</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">users.js</code></li>
      <li><code class="language-plaintext highlighter-rouge">urls.js</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">app.js</code></li>
  <li><code class="language-plaintext highlighter-rouge">middleware</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">permissions.js</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">credentials</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">secretstuff.js</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">package.json</code></li>
</ul>

<p>It’s a fairly straightforward layout, based on the classic MVC pattern. Since my first attempt at this project didn’t involve Vue, I used a templating engine native to Express. I opted for EJS over Pug/Jade because I preferred the syntax, though Pug is definitely more common.</p>

<p>The <code class="language-plaintext highlighter-rouge">routes</code> and <code class="language-plaintext highlighter-rouge">models</code> directories are the core of this application. The models are straightforward. Using MongoDB makes development very flexible. Here’s what a shortened URL looks like as a schema:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// models/urls.js - a schema for shortened URLs</span>

<span class="kd">let</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">mongoose</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">let</span> <span class="nx">uniqueValidator</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">mongoose-unique-validator</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">let</span> <span class="nx">Schema</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">safeBase</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">urlsafe-base64</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// Need special Base64 for URL friendliness (slashes omitted)</span>

<span class="c1">// Create a schema for our links</span>
<span class="kd">let</span> <span class="nx">urlSchema</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Schema</span><span class="p">({</span>
  <span class="na">_id</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
    <span class="na">index</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">long_url</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
    <span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">short_url</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
    <span class="na">trim</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">index</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">unique</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">sparse</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">date</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nb">Date</span><span class="p">,</span>
    <span class="na">default</span><span class="p">:</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">count</span><span class="p">:</span> <span class="p">{</span>
    <span class="c1">// Simple analytics for tracking clicks to the long URL from the short URL</span>
    <span class="na">type</span><span class="p">:</span> <span class="nb">Number</span><span class="p">,</span>
    <span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">default</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">categories</span><span class="p">:</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="c1">// Allows users to add a list of categories to the URL for their dashboard</span>
      <span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
      <span class="na">ref</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Url.categories.name</span><span class="dl">"</span><span class="p">,</span>
    <span class="p">},</span>
  <span class="p">],</span>
<span class="p">});</span>

<span class="nx">urlSchema</span><span class="p">.</span><span class="nf">plugin</span><span class="p">(</span><span class="nx">uniqueValidator</span><span class="p">);</span> <span class="c1">// Include the plugin to validate record uniqueness</span>
</code></pre></div></div>

<p>There’s nothing particularly special about the URL records; the schema defines the basic required information.</p>

<p>Now for the secret sauce — how the shortener actually functions. There are two parts. First, we define a counter schema, a record that updates and counts how many URLs have been shortened. Here’s that schema:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">CounterSchema</span> <span class="o">=</span> <span class="nc">Schema</span><span class="p">({</span>
  <span class="na">_id</span><span class="p">:</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="na">required</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>
  <span class="na">seq</span><span class="p">:</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="nb">Number</span><span class="p">,</span> <span class="na">default</span><span class="p">:</span> <span class="mi">0</span> <span class="p">},</span>
<span class="p">});</span>
<span class="kd">let</span> <span class="nx">counter</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nf">model</span><span class="p">(</span><span class="dl">"</span><span class="s2">counter</span><span class="dl">"</span><span class="p">,</span> <span class="nx">CounterSchema</span><span class="p">);</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">seq</code> attribute is incremented for every new URL. It’s a centralized place to record and generate the next unique (and short) identifier. It also allows for the potential to create a more complicated URL shortener that can tie into user accounts, specific domains, etc. But for now, it just counts.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">urlSchema</span><span class="p">.</span><span class="nf">pre</span><span class="p">(</span><span class="dl">"</span><span class="s2">save</span><span class="dl">"</span><span class="p">,</span> <span class="nf">function </span><span class="p">(</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">doc</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
  <span class="nx">counter</span><span class="p">.</span><span class="nf">findByIdAndUpdate</span><span class="p">(</span>
    <span class="p">{</span> <span class="na">_id</span><span class="p">:</span> <span class="dl">"</span><span class="s2">entityId</span><span class="dl">"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="na">$inc</span><span class="p">:</span> <span class="p">{</span> <span class="na">seq</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}</span> <span class="p">},</span>
    <span class="p">{</span> <span class="na">upsert</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span> <span class="na">new</span><span class="p">:</span> <span class="kc">false</span> <span class="p">},</span>
    <span class="nf">function </span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">counter</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if </span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="k">return</span> <span class="nf">next</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
      <span class="kd">let</span> <span class="nx">newid</span> <span class="o">=</span> <span class="nx">safeBase</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="nx">Buffer</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nx">counter</span><span class="p">.</span><span class="nx">seq</span><span class="p">.</span><span class="nf">toString</span><span class="p">()));</span>
      <span class="nx">doc</span><span class="p">.</span><span class="nx">_id</span> <span class="o">=</span> <span class="nx">newid</span><span class="p">.</span><span class="nf">toString</span><span class="p">();</span>
      <span class="nf">next</span><span class="p">();</span>
    <span class="p">}</span>
  <span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>This is the heart of the process! Here, we translate the counter that we created above into a base64, unique ID that’s also not very long. There are letious ways of doing this, like using the default ID associated with a MongoDB record. However, that ID is a pain to type and, if truncated, isn’t guaranteed to be unique. Moreover, this approach ties the Mongo record’s ID to the short URL ID, making them essentially the same thing—which is convenient and saves space.</p>

<p>All in all, when creating the models for a URL shortener, think simple and rely on native approaches like the one above. This has been a brief overview of what a MongoDB schema can look like. Next, we’ll dive deeper into the routes and the logic behind generating URLs and stopping spammers with Captcha!</p>]]></content><author><name>{&quot;email&quot;=&gt;&quot;blog@quickthoughts.ca&quot;}</name><email>blog@quickthoughts.ca</email></author><category term="development" /><category term="opinion" /><category term="nodejs" /><category term="programming" /><category term="web-development" /><category term="code" /><category term="mongodb" /><summary type="html"><![CDATA[A while back, long before tonight, I built a Node.js application called Lyt.Haus that shortened URLs. Conceptually, it’s simple and not exactly groundbreaking—there are hundreds, if not thousands, of sites offering similar functionality. So, why did I bother investing the time? Simply put, I wanted to tackle a project with a realistic goal that I could build from scratch within a manageable timeframe and, ultimately, use myself (and others).]]></summary></entry><entry><title type="html">Building a Flask Application: Where to Start</title><link href="http://localhost:4000/development/opinion/2022/02/09/flask-development-101.html" rel="alternate" type="text/html" title="Building a Flask Application: Where to Start" /><published>2022-02-09T05:10:38-05:00</published><updated>2022-02-09T05:10:38-05:00</updated><id>http://localhost:4000/development/opinion/2022/02/09/flask-development-101</id><content type="html" xml:base="http://localhost:4000/development/opinion/2022/02/09/flask-development-101.html"><![CDATA[<p>Flask is a Python framework designed to provide a lightweight and highly flexible web server. <a href="http://flask.pocoo.org/docs/1.0/">Flask</a> sells itself by stating how unopinionated it is, how few dependancies are required and how simple it is to get developing. Unlike <a href="https://www.djangoproject.com/">Django</a>, which has the opposite mentality of Flask, there is no default modeling, database abstraction or form management. All that’s provided is an interface to basic web server needs like requests, routing and templating - the bare bones required to create a web app.</p>

<p>There are benefits to this approach - mainly, there’s no requirment to implement functionality specific to Flask (for the most part). If you’ve worked with Django, or other web frameworks (like <a href="https://www.meteor.com/">Meteor</a>, or even <a href="https://wordpress.org/">WordPress</a>), there’s a learning curve when it comes to implememnting functionality outside the default framework. Another positive is how there are an abundance of extenstions that provide a wide range of solutions to common application problems. Flask-SQLAlchemy, for example, connects the standard SQLAlchemy to Flask, providing boilerplate logic when creating databases.</p>

<p>Perhaps the main negative is to all that freedom is when you want things to work without configuration or potentional conflict. Relying on third-part support means development of core features and external code can fall out of wack - especially when major iterations are released. But this concern is mitigated when you do your dudiligence selecting plugins.</p>

<h2 id="what-other-tech-should-be-used">What other tech should be used?</h2>

<p>Selecting Flask is only one part of the puzzle when building a web app. A web framework like Flask doesn’t provide all the bells and whistles needed to create a complete app. The frontend, database, devtools and more all need to be sorted too.</p>

<h3 id="picking-a-database">Picking a database</h3>

<p>Backend’s need to be connected to a database, where many options abound. Personally, I’d look for well supported database ORMs, like SQLAlchemy. From there, I’d choose whichever makes the most sense. <a href="https://www.postgresql.org/">Postgres</a> is a personal favourite since its FOSS and very capable - implementing the full SQL standard and many new features (like JSON). MySQL is also a popular choice, it’s mostly free and has a native IDE. Outside of SQL (relational DBs) exist NoSQL databases, Mongo being the mainstream choice for most, it provides all the benefits of Non relation databases (like very flexible data stores, easy data modeling and native JSON support). Mongo also has the benefit of being very well supported, both financially and across programming languages.</p>

<p>Redis and in-memory keybased datastores should also be considered depending on how you want to access data. Redis provides a simple and <em>fast</em> way to pull data like sessions and simple objects without bogging down your server.</p>

<h3 id="choosing-front-end-tech">Choosing Front end tech</h3>

<p>Another choice that needs to be settled is what templating engine should be picked. My <a href="https://gabehab.github.io/me/python/vue/web-development/programming/opinion/2019/01/31/refreshing-old-stacks.html">previous article</a> takes in depth about the newest tech in client and UI rendering. But ultimately, if you know you don’t need the power and complexity created by using new fangled templating engines, a simple native tempalting engine can be used, like Jinja for Flask, or EJS, Pug, or Handlebars for Express and Ruby.</p>

<h3 id="what-about-development-tools">What about development tools?</h3>

<p>Another factor is how you actually want to develop your application. This means local development environments that compliment your code and lifestyle. The use of devtools has been made easy thanks to Gulp, NPM, Grunt, Webpack, and the like. These tools may seem overkill or hard to learn but creating new programs without them is just as tedious.</p>

<p>Also, source control is pivotal, and 100% neccessary when creating <em>any</em> sized project! Github is very popular, and pretty straightforward.</p>

<h2 id="in-the-end-there-are-a-tonne-of-options">In the end, there are a tonne of options</h2>

<p>Only you know what you need and want - but make sure to research all your options! Overlooking this can mean lots of code debt in the future. Here’s an example of the tech I’ve used in the past to create complex web apps.</p>

<table class="table table table-striped table-hover">
  <thead>
    <tr>
      <th>Part of Stack</th>
      <th>Technology</th>
      <th>Libraries</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Frontend</td>
      <td>Vue</td>
      <td>Vuex, Router, SCSS</td>
    </tr>
    <tr>
      <td>Backend</td>
      <td>Flask</td>
      <td>SQLAlchemy, Celery, Pandas</td>
    </tr>
    <tr>
      <td>Database</td>
      <td>Postgres, Redis</td>
      <td> </td>
    </tr>
    <tr>
      <td>DevTools</td>
      <td>Venv, Webpack</td>
      <td>Vue-cli, Uglify</td>
    </tr>
  </tbody>
</table>]]></content><author><name>{&quot;email&quot;=&gt;&quot;blog@quickthoughts.ca&quot;}</name><email>blog@quickthoughts.ca</email></author><category term="development" /><category term="opinion" /><category term="python" /><category term="vue" /><category term="web-development" /><category term="programming" /><summary type="html"><![CDATA[Flask is a Python framework designed to provide a lightweight and highly flexible web server. Flask sells itself by stating how unopinionated it is, how few dependancies are required and how simple it is to get developing. Unlike Django, which has the opposite mentality of Flask, there is no default modeling, database abstraction or form management. All that’s provided is an interface to basic web server needs like requests, routing and templating - the bare bones required to create a web app.]]></summary></entry><entry><title type="html">Refreshing an old stack’s front end</title><link href="http://localhost:4000/development/opinion/2022/01/31/refreshing-old-stacks.html" rel="alternate" type="text/html" title="Refreshing an old stack’s front end" /><published>2022-01-31T14:10:48-05:00</published><updated>2022-01-31T14:10:48-05:00</updated><id>http://localhost:4000/development/opinion/2022/01/31/refreshing-old-stacks</id><content type="html" xml:base="http://localhost:4000/development/opinion/2022/01/31/refreshing-old-stacks.html"><![CDATA[<p>It’s obvious that refactoring or restructuring code too often is bad, and it’s especially obvious that completely switching an application’s core technology isn’t ideal either - but sometimes it <em>is</em> exactly what a stale project needs. When an app’s tech gets old, obsecured and falls out of favour with developers, updating its source code can quickly become a challenge. The importance of staying current with tech trends is reasonably important for most companies, and is only compounded when a company sells SaaS that relies on core software written decades before CSS3, or real, full-featured JS engines, or a world without Internet Explorer’s <a href="https://en.wikipedia.org/wiki/Trident_(software)">Trident rendering engine</a>.</p>

<p>But so is a complete rewrite - tay aking that old source code written in ASP.net and used by dozens of products across teams and servers is no small feat. As a result, sometimes it makes sense to break time-based tech paradigms and mix the paint a little. Just because you’re running some archaic database system, or an ancient .NET backend doesn’t mean the newest in front end tech is unattainable.</p>

<h2 id="the-new-front-end-now-with-logic">The New Front End, now with logic!</h2>

<p>If you’ve kept up with frontend tech, you’d assuredly heard of <a href="https://reactjs.org/">React</a>, <a href="https://vuejs.org/">Vue.js</a>, or <a href="https://angular.io/">Angular</a>. All three aim to do roughly the same thing - provide a logically and programmatic solution to mantaining front-end UI. If you dig deeper, you’d soon discover nuance differences on how each approach the problem, how they’ve evolved to accomplish wildly impressive things (think native cross-OS app development) and the way each embraced the new world of rendering UI/UX with JavaScript.</p>

<p>Personally, I fell in love with Vue and how it provides familiar syntax, a logical paradigm that maps well with backend/browser use cases and best yet, a very active and large open source community. Unlike React (which is funded by the likes of <a href="https://www.youtube.com/watch?v=-Y2R01k4SXI">Facebook</a>) and Angular (similarlly tied up with Google), Vue has an earnest community-first vibe.</p>

<p>All in all, I highly encourage readers that aren’t well versed in either three to learn about each and consider adding one of them to your tech stack. It’s quite effortless and barrier-free to create a component that integrates into existing code. Especially when the component is isolate in functionality and decoupled from the view at hand (e.g. the recommended section at the end of an article).</p>

<h2 id="why">Why?!</h2>

<p>Realistically, when developers use existing server rendered templating engines, they do so out of a sense of familiarity and ease. It takes zero set up to create static, model driven views when creating an application - until less trivial use cases arise (which pretty much always occurs).</p>

<p>Every ‘backend’ tech stack has at least one templating engine, and some <em>are</em> the templating language, like PHP. But the strength of these langauges isn’t how fast they can render HTML, it’s typically how straightforward it is to use ORMs or create RESTful APIs. The server side rendering is an afterthought, and still heavily relies on front end languages like JavaScript and CSS to do a majority of the grunt work.</p>

<p>So why would you want to create a highly coupled template that will ultimately need to use JS and burden yourself with twice the work load. Vue and the like allow for a decoupled approach, allowing for native technologies to handle the frontend. By defering rendering to the client, the server can be free of weird and always-tedious rendering engines.</p>

<p>Furthermore, decoupling your views from your API is always good - APIs shouldn’t be tied to client facing UI. Since technologies on all sides of the equation change rapidly and with little regard for each, your approach should be able to handle that.</p>

<h2 id="front-end-no-longer-means-server-rendered">Front end no longer means server rendered!</h2>

<p>Break free from Jinja, PHP, <a href="https://github.com/sebastienros/fluid">Fluid</a> and trying to keep up with complex UI/UX. Consider the fact JavaScript is ubiquitous and is a native way to interact with client facing applications. Old stacks need not worry, you can handle APIs with ease and comfort with JS templating engines!</p>]]></content><author><name>{&quot;email&quot;=&gt;&quot;blog@quickthoughts.ca&quot;}</name><email>blog@quickthoughts.ca</email></author><category term="development" /><category term="opinion" /><category term="python" /><category term="vue" /><category term="web-development" /><category term="programming" /><category term="opinion" /><summary type="html"><![CDATA[It’s obvious that refactoring or restructuring code too often is bad, and it’s especially obvious that completely switching an application’s core technology isn’t ideal either - but sometimes it is exactly what a stale project needs. When an app’s tech gets old, obsecured and falls out of favour with developers, updating its source code can quickly become a challenge. The importance of staying current with tech trends is reasonably important for most companies, and is only compounded when a company sells SaaS that relies on core software written decades before CSS3, or real, full-featured JS engines, or a world without Internet Explorer’s Trident rendering engine.]]></summary></entry><entry><title type="html">The Good and Bad After 12 Months with a System76 Lemur Pro 9</title><link href="http://localhost:4000/technology/opinion/review/2021/09/14/s76-lemp9-review.html" rel="alternate" type="text/html" title="The Good and Bad After 12 Months with a System76 Lemur Pro 9" /><published>2021-09-14T21:10:48-04:00</published><updated>2021-09-14T21:10:48-04:00</updated><id>http://localhost:4000/technology/opinion/review/2021/09/14/s76-lemp9-review</id><content type="html" xml:base="http://localhost:4000/technology/opinion/review/2021/09/14/s76-lemp9-review.html"><![CDATA[<h2 id="overview">Overview</h2>

<p>12 months ago, I bought a rather expensive ($1,600 Canadian) laptop from <a href="https://system76.com/">System76</a> - a vendor that focuses on Linux hardware and software. That being said, S76 did not manufacture the Lemur 9 that I purchased, instead it was made by <a href="https://clevo-computer.com/">Clevo</a> and resold by S76, which then provides support and custom software.</p>

<p>In general, I have no qualms with the approach S76 takes in their laptops - as long as I get a high quality product. Over the year of ownership I’ve run into many issues but also come to appreciate some of the laptops features. The rest of the article goes over the specific strengths and weaknesses of the machine.</p>

<h2 id="physical-form-factor">Physical Form Factor</h2>

<p>The build and final product is over of a high q uality, with good hinges and chassis, but lackluster finishes. Hardware components are generally replaceable. Overall, it is built within expectation.</p>

<h3 id="chassis">Chassis</h3>

<p>The Good:</p>

<ul>
  <li>Metal body, including the bottom panel and screen surrounding has held up well after mild abuse</li>
  <li>Access to internals is easy with 12 philips screws securing the bottom panel</li>
  <li>Battery, network card, SSD, battery and RAM are all user-replaceable with no funkiness (e.g. no glue, adhesives, etc)</li>
  <li>General form-factor is a great size, highly portable but still functional</li>
  <li>Hinges are very robust, even with the extraordinary hinge range (fully opened, the screen can be parallel to the ground)</li>
</ul>

<p>The Bad:</p>

<ul>
  <li>Rubber feet (that prevent the body from moving on surfaces) fall off rather easily, I have already lost one</li>
  <li>The metallic finish on the main laptop body (i.e. where the keyboard is located) is glossy, and picks up dirt and oils from hands easily, requires constant cleaning</li>
  <li>Speaker is too quiet/muddy at louder volumes</li>
  <li>Hardware issue where the speaker stops working at louder volumes</li>
</ul>

<p>The Average:</p>

<ul>
  <li>Keyboard is meh, not the best feeling nor the worst, finish of keys and key font look cheap</li>
  <li>Trackpad is average, no qualms with its physical placement but could be larger</li>
</ul>

<h3 id="internals">Internals</h3>

<p>The Good:</p>

<ul>
  <li>Screen is surprisingly high quality with little washout, no dead pixels, no burn-in</li>
  <li>32GB RAM slot is nice</li>
  <li>2 separate NVMe SSD slots</li>
  <li>S76 provides <a href="https://tech-docs.system76.com/models/lemp9/README.html">public guides and documentation</a> that walk through replacing basic internal components</li>
  <li>CPU performance is very adequate (Intel i5-10210U CPU @ 1.60GHz)</li>
  <li>Battery life is long lasting, 8+ hours with a mixed load</li>
</ul>

<p>The Bad:</p>

<ul>
  <li>Chassis becomes quite hot under any load</li>
  <li>Soldered 8Gb of RAM is non-removable, would have preferred 2 slots</li>
  <li>Unable to spec the machine without hardware, I’d rather not have to pay for the default SSD when I knew I’d replace it</li>
  <li>Network card isn’t FOSS (hardware or driver) and there doesn’t appear a FOSS alternative</li>
</ul>

<h2 id="software">Software</h2>

<p>Perhaps the most important aspect of this specific laptop. The software is what separates it from most other competitors/resellers. Some of the software developed by S76 (like <a href="https://pop.system76.com/">PopOS</a>) can be used by any machine while other software (e.g. firmware) is specific to their machines.</p>

<p>However, while the FOSS nature of the software is absolutely fantastic, it still needs to work effectively, meaning the hardware should be well supported and stable, which is not always the case.</p>

<p>The Good:</p>

<ul>
  <li>Comes out of the box with a capable Linux distro called PopOS which is based off Ubuntu/Gnome, with it’s own tweaks (like <a href="https://github.com/pop-os/cosmic">COSMIC</a>)</li>
  <li>Runs System76’s own firmware which is FOSS, and updated regularly</li>
  <li>Apparently (I haven’t actually checked) has Intel’s ME disabled</li>
  <li>Runs Coreboot (open source BIOS)</li>
  <li>Code is generally all open source and <a href="https://github.com/system76">available on github</a></li>
  <li>Battery life is very good, 10+ hours unplugged and under moderate load</li>
  <li>No weird vendor lock-in or hardware/software restrictions</li>
</ul>

<p>The Bad:</p>

<ul>
  <li>Long-standing instability
    <ul>
      <li>Reoccurring issues with newer kernels that causes hard system crashes (still happening)</li>
      <li>Lockups on older firmware</li>
    </ul>
  </li>
  <li>Incomplete or slow to release firmware level features
    <ul>
      <li>Battery charge thresholds (i.e. stopping a plugged-in battery from exceeding 80% charge) wasn’t available until maybe 6 months after purchase</li>
    </ul>
  </li>
  <li>Suspend (i.e. after shutting the laptop lid) doesn’t really work
    <ul>
      <li>Battery drains as if it was not shut, have to turn off the machine</li>
    </ul>
  </li>
</ul>

<h2 id="everything-else">Everything else</h2>

<p>The Good:</p>

<ul>
  <li>Support is quick and easy to access</li>
  <li>FOSS is nice</li>
  <li>Nice to be able to support a smaller Linux-first shop, and not give my money to massive corporations that trample on privacy, etc</li>
</ul>

<p>The Average:</p>

<ul>
  <li>Hard to contribute back (personal experience - PRs aren’t reviewed/help is hard to come by when stuck on specific issues)</li>
</ul>

<p>The Bad:</p>

<ul>
  <li>It appears (this is pure speculation) that the team that writes the software/firmware is spread very thin so development lingers, bugs persist, features aren’t built, etc</li>
  <li>Hardware cycle is rather fast and unknown, the lemp10 released just a couple months after purchasing my lemp9</li>
</ul>

<p>All in all, it has been a mixed experience with this laptop and System76 in general. I would not recommend it to the average consumer, but if you’ve got some spare cash, love FOSS and want something modern but also understand the compromises, the lemp9 (and probably the lemp10) could be an option.</p>]]></content><author><name>{&quot;email&quot;=&gt;&quot;blog@quickthoughts.ca&quot;}</name><email>blog@quickthoughts.ca</email></author><category term="technology" /><category term="opinion" /><category term="review" /><category term="system76" /><category term="laptop" /><category term="linux" /><summary type="html"><![CDATA[Overview]]></summary></entry><entry><title type="html">Building a Startup on $10 a Month</title><link href="http://localhost:4000/startup/opinion/2021/01/15/the-10-dollar-startup.html" rel="alternate" type="text/html" title="Building a Startup on $10 a Month" /><published>2021-01-15T20:10:48-05:00</published><updated>2021-01-15T20:10:48-05:00</updated><id>http://localhost:4000/startup/opinion/2021/01/15/the-10-dollar-startup</id><content type="html" xml:base="http://localhost:4000/startup/opinion/2021/01/15/the-10-dollar-startup.html"><![CDATA[<h2 id="summary">Summary</h2>

<p>When building <a href="https://fixed.link/">Fixed.link</a>, I prioritized minimizing spend and built my startup which served many thousands of users while spending only $10 a month. Early on in your startup journey, it’s crucial to be resourceful and make things work for you. How? Specifically for SaaS startups, utilize flexible tools (e.g., while managed Kubernetes/database/load balancer/toaster services are convenient, they’re far more expensive than a VPS), “hack” things (use free tiers and competitor services to ensure your service runs smoothly), choose the most effective advertising channels, seek out referrals, and code—don’t buy (unless absolutely necessary). This is the approach I’ve taken so far. Read on for more ideas and specific examples of how I’ve put these practices into action. A heads up: I use referrals for tools that save money or get things done; these are marked with an asterisk (*).</p>

<h2 id="the-mindset-behind-founding-a-low-cost-startup">The Mindset Behind Founding a Low-Cost Startup</h2>

<p>It’s likely that every founder (and really, most people) dreams of success. However, it’s no secret that only a small fraction of startups actually achieve it. The realities of the startup world are harsh—even with significant funding, success is never guaranteed. Now, I’m not suggesting there’s no correlation between success and funding (having ample cash certainly doesn’t hurt). But for those of us who aren’t so fortunate, what can we do? Simply put, keep your expenses aligned with your comfort level with risk. For me, being frugal is second nature, and I knew the odds of overcoming early startup hurdles were against me. Therefore, I’ve strived to minimize financial burdens (without imposing unnecessary technical limitations) while still positioning myself for market success.</p>

<h2 id="use-flexible-tools-and-know-your-scale">Use Flexible Tools and Know Your Scale</h2>

<p>We’ve discussed the mindset needed for starting a budget-conscious company, but how do you create something viable without spending a fortune? Well, your offering shouldn’t be expensive to manufacture or provide. Ideally, it should be software—something scalable. Furthermore, there’s no point in saving money if it hinders your ability to sell or deliver a product/service. That’s where experience comes in. Know when to build versus buy, and when to choose a simple solution over the fancy new one. Become an expert builder, a master tinkerer, and a jack of all trades. Technology changes rapidly, and while SaaS becomes increasingly user-friendly, it can also become expensive.</p>

<p>For example, microservice architecture is currently very popular and often utilizes pay-per-instance services that offer easily scalable containers. This is great for ultra-scalable, high-traffic systems, but it’s also expensive! Understand your scale, and don’t solve problems you won’t face in the near future. A simple VPS (or a collection of VPS) can be a robust and cost-effective alternative. Personally, I use <a href="https://m.do.co/c/62406b4b1e4f">DigitalOcean’s $10/month VPS</a>* which also has a free-tier and have no issue serving thousands of requests daily. Looking ahead, tools like Docker Swarm can make scaling relatively easy. Other techniques, such as CDNs, aggressive caching, queues, and smart product planning can make a huge difference in performance while keeping RAM/CPU costs down—at virtually no cost.</p>

<h2 id="embrace-free-and-work-around-costs">Embrace “Free” and Work Around Costs</h2>

<p>Take advantage of free services. FOSS is great, but free is free. Fixed.link doesn’t pay for emails, analytics/tracking, or ads. In fact, other than the VPS, there are no extra expenses. Surprised? You might be thinking, “How can email be free?” Well, we send fewer than 300 emails a day, which is free at <a href="https://www.sendinblue.com/pricing/">SendInBlue</a>. When you scale, they offer great deals to startups (just reach out), keeping costs manageable. I could have created my own email service, but from past experience, this is where time is more valuable than money. Self-hosted email services are a pain.</p>

<p>Many companies, even small startups, believe they <em>need</em> deep, AI-driven, growth-hacking analytics services to understand their users. I can already hear them say, “Without the black magic wizardry of expensive MarTech tools, how can we possibly decide what color our buttons should be?!” Having worked in product, I’ve attended countless meetings where we’d review heatmaps of clicks on a page and user journey flow charts to determine that we must <em>change/fix/break/add a new button/modal/input/color</em>. Instead, Fixed.link uses <a href="https://github.com/umami-software/umami">Umami</a>, a FOSS analytics service. It’s easy to self-host, simple to use, and far less invasive than paid services. It covers the basics, isn’t based on voodoo, and costs nothing. Ultimately, find tools that work for you, but avoid buying more than you need.</p>]]></content><author><name>{&quot;email&quot;=&gt;&quot;blog@quickthoughts.ca&quot;}</name><email>blog@quickthoughts.ca</email></author><category term="startup" /><category term="opinion" /><category term="startups" /><category term="business" /><category term="advice" /><category term="cash-strapped" /><category term="tech" /><category term="opinion" /><summary type="html"><![CDATA[Summary]]></summary></entry><entry><title type="html">Using hCaptcha instead of Google’s ReCaptcha with Vue and Express</title><link href="http://localhost:4000/development/degoogle/2020/12/15/using-hcaptcha-in-vue-instead-of-google.html" rel="alternate" type="text/html" title="Using hCaptcha instead of Google’s ReCaptcha with Vue and Express" /><published>2020-12-15T20:10:48-05:00</published><updated>2020-12-15T20:10:48-05:00</updated><id>http://localhost:4000/development/degoogle/2020/12/15/using-hcaptcha-in-vue-instead-of-google</id><content type="html" xml:base="http://localhost:4000/development/degoogle/2020/12/15/using-hcaptcha-in-vue-instead-of-google.html"><![CDATA[<p>For much the same reasons as my last <a href="/development/opinion/2020/03/06/google-captcha-express-js.html">captcha related post</a>, when needing a form of bot deterrence, it makes sense to use a captcha provider. At <a href="https://fixed.link">fixed.link</a> we use it to gate registrations and no-account shortened URLs to help remove some risk of spam. To quickly sum it up, using a provider allows for an easy means of stopping most bots abilities to interact with an application.</p>

<p>Historically, implementing a useful, and not-too-impossible challenge-test was difficult and chalk-full of issues (accessibility, language, buggy). With that said, there is no excuse into todays world to rely on a privacy-invading, ad-selling organization like Google for such a tool. This is where <a href="https://hCaptcha.com/?r=1d541b532693">hCaptcha</a> comes in. Please note that I’ve used my referral link to hCaptcha (although it remains unknown what that actually provides me, but just fyi).</p>

<p>hCaptcha actually pays for the privilege of servings its challenges on your application, which is obviously a nice touch compared to ReCaptcha. As for scale and performance, <a href="https://blog.cloudflare.com/moving-from-recaptcha-to-hcaptcha/">giants like cloudflare</a> use it for their DDOS protection, so I’d doubt you’d run into scalability issues.</p>

<p>Changing providers couldn’t be more straightforward as hCaptcha allows for a direct drop-in replacement for most of <a href="https://developers.google.com/recaptcha/">Google ReCaptcha’s</a> API and features. Furthermore, hCaptcha and the community <a href="https://github.com/hCaptcha">provide libraries</a> for both frontend and backend environments, meaning its extremely easy to integrate and include as a dependency.</p>

<p>As for how to implement a captcha service effectively, it needs to be implemented <em>around</em> frontend interactions and verified on the backend. That is, gate your expensive interaction (i.e. registering for an account) that triggers the challenge, and shoot a request to your normal API endpoint after the user completes the test. From there, the server confirms with hCaptcha that the generated frontend token is valid and then carry on with processing the request normally. This acts as a pass/no-pass middleware before the actual requested endpoint is hit.</p>

<p>For this article, I’ll be using <a href="https://github.com/hCaptcha/vue-hcaptcha">vue-hcaptcha</a> which is a simple wrapper of their JS API with all the necessary vue-ification (e.g. events) that make it easy to drop in a Vue application. As for the backend, I’ve decided to use a <a href="https://github.com/vastus/node-hcaptcha">community package</a> for Node. Again, this package is also a very simple wrapper (it literally has one function that makes a http request to hCaptcha’s <code class="language-plaintext highlighter-rouge">/verify</code> endpoint), but done well, with zero external dependancies - so no point rewriting whats already implemented!</p>

<h2 id="using-hcaptcha-in-a-vue-app">Using hCaptcha in a Vue app</h2>

<p>The <a href="https://github.com/hCaptcha/vue-hcaptcha">documentation</a> for the Vue library is useful, as is the general <a href="https://docs.hcaptcha.com/">documentation</a> provided by hCaptcha for the service itself! Setting up is simply done by pluging in your secret key</p>

<h3 id="the-frontend-setup">The frontend setup</h3>

<p>First, install the library!</p>

<p><code class="language-plaintext highlighter-rouge">npm install @hcaptcha/vue-hcaptcha --save</code></p>

<p>Next grab your <em>sitekey</em> and throw it in your <code class="language-plaintext highlighter-rouge">.env</code> file of choice. Note that for dev, its likely you’d want to use <code class="language-plaintext highlighter-rouge">10000000-ffff-ffff-ffff-000000000001</code> so you don’t need to actually answer your challenges.</p>

<pre><code class="language-env">VUE_APP_HCAPTCHA_SITEKEY=10000000-ffff-ffff-ffff-000000000001
</code></pre>

<h3 id="using-the-hcaptcha-component">Using the hCaptcha component</h3>

<p>Finally, using the library. In the component you want to gate (e.g. a form), add in the hcaptcha component. Check out this exammple below.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">template</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">div</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">formContainer</span><span class="dl">"</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">vue</span><span class="o">-</span><span class="nx">hcaptcha</span>
      <span class="nx">ref</span><span class="o">=</span><span class="dl">"</span><span class="s2">importantButton</span><span class="dl">"</span>
      <span class="p">:</span><span class="nx">sitekey</span><span class="o">=</span><span class="dl">"</span><span class="s2">VUE_APP_HCAPTCHA_SITEKEY</span><span class="dl">"</span>
      <span class="nx">theme</span><span class="o">=</span><span class="dl">"</span><span class="s2">dark</span><span class="dl">"</span>
      <span class="nx">size</span><span class="o">=</span><span class="dl">"</span><span class="s2">invisible</span><span class="dl">"</span>
      <span class="p">@</span><span class="nd">verify</span><span class="o">=</span><span class="dl">"</span><span class="s2">onCallback</span><span class="dl">"</span>
      <span class="p">@</span><span class="nd">expired</span><span class="o">=</span><span class="dl">"</span><span class="s2">onExpire</span><span class="dl">"</span>
      <span class="p">@</span><span class="nd">error</span><span class="o">=</span><span class="dl">"</span><span class="s2">onError</span><span class="dl">"</span>
    <span class="o">/&gt;</span>

    <span class="o">&lt;</span><span class="nx">form</span> <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">importantForm</span><span class="dl">"</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">b</span><span class="o">-</span><span class="nx">input</span>
          <span class="nx">v</span><span class="o">-</span><span class="nx">model</span><span class="o">=</span><span class="dl">"</span><span class="s2">juicyData</span><span class="dl">"</span>
          <span class="nx">placeholder</span><span class="o">=</span><span class="dl">"</span><span class="s2">Put info here</span><span class="dl">"</span>
        <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="nx">button</span>
        <span class="p">@</span><span class="nd">click</span><span class="o">=</span><span class="dl">"</span><span class="s2">onSubmit</span><span class="dl">"</span>
      <span class="o">&gt;</span><span class="nx">Click</span> <span class="nx">Me</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/form</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/template</span><span class="err">&gt;
</span></code></pre></div></div>

<p>Wow thats a lot of stuff. But in reality, just a form with an input and a button. The fun stuff is the <code class="language-plaintext highlighter-rouge">&lt;vue-hcaptcha /&gt;</code> component. Attached to that component are the events provided by the library. But before we get there, we need to handle the submit! In this case, just a simple button with a method <code class="language-plaintext highlighter-rouge">onSubmit()</code>.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
<span class="k">import</span> <span class="nx">VueHcaptcha</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@hcaptcha/vue-hcaptcha</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="na">components</span><span class="p">:</span> <span class="p">{</span>
    <span class="nx">VueHcaptcha</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="nf">data</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="na">juicyData</span><span class="p">:</span> <span class="dl">''</span><span class="p">,</span>
      <span class="na">VUE_APP_HCAPTCHA_SITEKEY</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">VUE_APP_HCAPTCHA_SITEKEY</span><span class="p">,</span>
    <span class="p">};</span>
  <span class="p">},</span>
  <span class="na">methods</span><span class="p">:</span> <span class="p">{</span>
    <span class="nf">onSubmit</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// hit the captcha components .execute() method, which does all the heavy lifting</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">$refs</span><span class="p">.</span><span class="nx">importantButton</span><span class="p">.</span><span class="nf">execute</span><span class="p">();</span>
    <span class="p">},</span>
    <span class="nf">onCallback</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">captcha</span> <span class="o">=</span> <span class="nx">response</span><span class="p">;</span> <span class="c1">// get the token from the successful challenge</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nf">dispatch</span><span class="p">(</span><span class="dl">'</span><span class="s1">makeAsyncRequest</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="c1">// eg fetch(`/endpoint`, {payload})</span>
        <span class="na">captcha</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">captcha</span><span class="p">,</span>
        <span class="na">juicyData</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">juicyData</span>
      <span class="p">});</span>
    <span class="p">},</span>
    <span class="nf">onExpire</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// example of handling expired captcha</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">$store</span><span class="p">.</span><span class="nf">commit</span><span class="p">(</span><span class="dl">'</span><span class="s1">SET_ERROR</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Captcha expired. Please try again.</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">},</span>
    <span class="nf">onError</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// do something with the error</span>
    <span class="p">},</span>
  <span class="p">},</span>
<span class="p">};</span>
<span class="o">&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span></code></pre></div></div>

<p>Wow again, even more code to read… but again, it’s mostly easy stuff.</p>

<p>To start, set the sitekey via <code class="language-plaintext highlighter-rouge">process.env.VUE_APP_HCAPTCHA_SITEKEY</code> in <code class="language-plaintext highlighter-rouge">data</code>, this gives us access to, well, the sitekey.</p>

<p>Next, recall the <code class="language-plaintext highlighter-rouge">$ref</code> on the hcaptcha component, we reference that in the <code class="language-plaintext highlighter-rouge">onSubmit</code> method, and that works its magic, setting up the challenge and all that goodness.</p>

<p>From there, we attach some methods to handle the events passed back from the hCaptcha component. Very self explaintory, with the important event being handled by <code class="language-plaintext highlighter-rouge">onCallback(response)</code>. This is where we make the request to our backend, and verify the challenge is actually genuine.</p>

<h3 id="setting-up-the-express-application-backend">Setting up the Express application (backend)</h3>

<p>We need to be able to parse the request, grab the token value, and then shoot out a call to the hCaptcha service and see if the request can be trusted. Set the <code class="language-plaintext highlighter-rouge">HCAPTCHA_SECRET</code> in the server’s <code class="language-plaintext highlighter-rouge">.env</code>.</p>

<p>In Express, a simple middleware that can parse and shootout a request to the service is just what the Doctor ordered. It provides a portable way to pick and choose which routes need to be validated, and allows an easy way to reject requests. In <code class="language-plaintext highlighter-rouge">verification.js</code> we’ll create this middleware.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">HCAPTCHA_SECRET</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">HCAPTCHA_SECRET</span><span class="p">;</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">verify</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">hcaptcha</span><span class="dl">"</span><span class="p">);</span>
<span class="cm">/**
 * Validate client facing Captcha request.
 */</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="k">async</span> <span class="kd">function</span> <span class="nf">verifyCaptcha</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// get captcha token from body</span>
  <span class="kd">const</span> <span class="nx">token</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">[</span><span class="dl">"</span><span class="s2">captcha</span><span class="dl">"</span><span class="p">];</span>
  <span class="c1">// request verification</span>
  <span class="k">await</span> <span class="nf">verify</span><span class="p">(</span><span class="nx">HCAPTCHA_SECRET</span><span class="p">,</span> <span class="nx">token</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">next</span><span class="p">())</span> <span class="c1">//passed, so go forward</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nf">next</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span> <span class="c1">//oh no, bad, handle accordingly</span>
    <span class="p">});</span>
<span class="p">};</span>
</code></pre></div></div>

<p>The function grabs the token from the form, shoots a POST request to hCaptcha, and then checks if its successful and returns a high enough score to continue on to the next step.</p>

<p>A route looks very familiar, just add the middleware, and bingo-bango. Here’s an example,</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">verifyCaptcha</span> <span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">../middleware/verification</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">router</span><span class="p">.</span><span class="nf">route</span><span class="p">(</span><span class="dl">"</span><span class="s2">/register</span><span class="dl">"</span><span class="p">).</span><span class="nf">post</span><span class="p">(</span><span class="nx">verifyCaptcha</span><span class="p">,</span> <span class="nx">handleRegistration</span><span class="p">);</span>
</code></pre></div></div>

<p>And that’s it! A really straightforward way to provide some protection and judge user interactions. If you’d like to see it in the wild, check out <a href="https://fixed.link">fixed.link</a>, manage URLs and own your links! Its a free URL management service (with free URL shortening).</p>]]></content><author><name>{&quot;email&quot;=&gt;&quot;blog@quickthoughts.ca&quot;}</name><email>blog@quickthoughts.ca</email></author><category term="development" /><category term="degoogle" /><category term="vue" /><category term="captcha" /><category term="node" /><category term="web-development" /><category term="programming" /><category term="google" /><summary type="html"><![CDATA[For much the same reasons as my last captcha related post, when needing a form of bot deterrence, it makes sense to use a captcha provider. At fixed.link we use it to gate registrations and no-account shortened URLs to help remove some risk of spam. To quickly sum it up, using a provider allows for an easy means of stopping most bots abilities to interact with an application.]]></summary></entry></feed>